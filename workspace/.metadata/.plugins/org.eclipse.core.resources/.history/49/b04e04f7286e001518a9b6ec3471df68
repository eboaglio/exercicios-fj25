package br.com.caelum.financas.dao;

import java.math.BigDecimal;
import java.util.Calendar;
import java.util.List;

import javax.ejb.Stateless;
import javax.inject.Inject;
import javax.persistence.EntityManager;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Expression;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import br.com.caelum.financas.exception.ValorInvalidoException;
import br.com.caelum.financas.modelo.Conta;
import br.com.caelum.financas.modelo.Movimentacao;
import br.com.caelum.financas.modelo.TipoMovimentacao;
import br.com.caelum.financas.modelo.ValorPorMesEAno;

@Stateless
public class MovimentacaoDao {

	// @PersistenceContext //Aqui quem gerencia o EntityManager é o EJB
	@Inject
	// Agora é o CDI quem vai gerenciar o EntityManager
	private EntityManager manager;

	public void adiciona(Movimentacao movimentacao) {
		manager.joinTransaction();
		this.manager.persist(movimentacao);

		if (movimentacao.getValor().compareTo(BigDecimal.ZERO) < 0) {
			throw new ValorInvalidoException("Movimentação negativa");
		}
	}

	public Movimentacao busca(Integer id) {
		manager.joinTransaction();
		return this.manager.find(Movimentacao.class, id);
	}

	public List<Movimentacao> lista() {
		manager.joinTransaction();
		return this.manager.createQuery("select m from Movimentacao m",
				Movimentacao.class).getResultList();
	}

	public List<Movimentacao> listaComCategorias() {
		manager.joinTransaction();
		return this.manager
				.createQuery(
						"select distinct m from Movimentacao m left join fetch m.categorias",
						Movimentacao.class).getResultList();
	}

	public List<Movimentacao> lista(Conta conta) {
		// Essa primeira atribuição possibilita um sql injection
		// String jpql = "select m from Movimentacao m where m.conta.id = " +
		// conta.getId();
		// Positional parameters - Essa segunda atribuição fica inviável quando
		// existem muitos parâmetros
		// String jpql = "select m from Movimentacao m where m.conta.id = ?1";
		// Named parameters
		String jpql = "select m from Movimentacao m where m.conta = :conta"
				+ " order by m.valor desc";
		manager.joinTransaction();
		Query query = manager.createQuery(jpql);
		// query.setParameter(1, conta.getId());
		query.setParameter("conta", conta);
		return query.getResultList();
	}

	public BigDecimal calculaTotalMovimentado(Conta conta, TipoMovimentacao tipo) {
		String jpql = "select sum(m.valor) from Movimentacao m "
				+ "where m.conta = :conta and m.tipoMovimentacao = :tipo";
		manager.joinTransaction();
		TypedQuery<BigDecimal> query = this.manager.createQuery(jpql,
				BigDecimal.class);
		query.setParameter("tipo", tipo);
		query.setParameter("conta", conta);
		return query.getSingleResult();
	}

	public List<Movimentacao> listaMovimentacaoPorTitular(String titular) {
		String jpql = "select m from Movimentacao m where m.conta.titular like :titular";
		manager.joinTransaction();
		TypedQuery<Movimentacao> query = manager.createQuery(jpql,
				Movimentacao.class);
		query.setParameter("titular", "%" + titular + "%");
		return query.getResultList();
	}

	public List<Movimentacao> listaPorValorTipo(BigDecimal valor,
			TipoMovimentacao tipo) {
		String jpql = "select m from Movimentacao m where m.valor = :valor "
				+ "and m.tipoMovimentacao = :tipo " + "order by m.valor desc";
		manager.joinTransaction();
		Query query = manager.createQuery(jpql);
		query.setParameter("valor", valor);
		query.setParameter("tipo", tipo);
		query.setHint("org.hibernate.cacheable", "false");
		return query.getResultList();
	}

	public List<ValorPorMesEAno> listaMesesComMovimentacoes(Conta conta,
			TipoMovimentacao tipoMovimentacao) {
		String jpql = "select new br.com.caelum.financas.modelo.ValorPorMesEAno(month(m.data),year(m.data),sum(m.valor)) "
				+ "from Movimentacao m where m.conta = :conta and m.tipoMovimentacao = :tipoMovimentacao "
				+ "group by year(m.data)||month(m.data) order by sum(m.valor) desc";
		manager.joinTransaction();
		Query query = manager.createQuery(jpql);
		query.setParameter("conta", conta);
		query.setParameter("tipoMovimentacao", tipoMovimentacao);
		return query.getResultList();
	}

	public List<Movimentacao> listaComFiltros(Calendar data,
			TipoMovimentacao tipo, BigDecimal valor) {
		StringBuilder jpql = new StringBuilder(
				"select m from Movimentacao m where 1 = 1 ");
		manager.joinTransaction();
		Query query = manager.createQuery(jpql.toString());

		if (data != null) {
			jpql.append("and m.data = :data ");
			query.setParameter("data", data);
		}

		if (tipo != null) {
			jpql.append("and m.tipoMovimentacao = :tipo ");
			query.setParameter("tipoMovimentacao", tipo);
		}

		if (valor != null) {
			jpql.append("and m.valor = :valor");
			query.setParameter("valor", valor);
		}

		return query.getResultList();
	}

	public List<Movimentacao> listaTodasComCriteria(){
		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<Movimentacao> criteria = builder.createQuery(Movimentacao.class);
		criteria.from(Movimentacao.class);
		
		manager.joinTransaction();
		return manager.createQuery(criteria).getResultList();
		
	}

	public BigDecimal somaMovimentacoesDoTitular(String titular){
		CriteriaBuilder builder = manager.getCriteriaBuilder();
		CriteriaQuery<BigDecimal> criteria = builder.createQuery(BigDecimal.class);
		Root<Movimentacao> root = criteria.from(Movimentacao.class);
		criteria.select(builder.sum(root.<BigDecimal>get("valor")));
		criteria.where(builder.like(root.<Conta>get("conta").<String>get("titular"), "%"+titular+"%"));
		
		manager.joinTransaction();
		return manager.createQuery(criteria).getSingleResult();
	}
	
	public List<Movimentacao> pesquisa(Conta conta, TipoMovimentacao tipo, Integer mes){
		CriteriaBuilder builder = this.manager.getCriteriaBuilder();
		CriteriaQuery<Movimentacao> criteria = builder.createQuery(Movimentacao.class);
		Root<Movimentacao> root = criteria.from(Movimentacao.class);
		Predicate conjunction = builder.conjunction();
		
		if (conta != null){
			conjunction = builder.and(conjunction,builder.equal(root.<Conta>get("conta"), conta));
		}
		
		if (mes != null && mes != 0){
			Expression<Integer> expression = builder.function("month", Integer.class, root.<Calendar>get("data"));
			conjunction = builder.and(conjunction, builder.equal(expression,mes));
		}
		
		if (tipo != null){
			conjunction = builder.and(conjunction,builder.equal(root.<TipoMovimentacao>get("tipoMovimentacao"), tipo));
		}
		
		criteria.where(conjunction);
		manager.joinTransaction();
		return this.manager.createQuery(criteria).getResultList();
	}
	
	public List<Movimentacao> criteriaComFiltro(Calendar data,
			TipoMovimentacao tipo, BigDecimal valor) {

		CriteriaBuilder builder = manager.getCriteriaBuilder();
		//Se for uma query de Movimentacao sem condição(where), então coloca o Generics de Movimentacao
		//CriteriaQuery<Movimentacao> criteria = builder.createQuery(Movimentacao.class);
		
		//Como a query terá um retorno do valor que é um BigDecimal, o Generics do CriteriaQuery é um BigDecimal
		CriteriaQuery<BigDecimal> criteria = builder.createQuery(BigDecimal.class);
		Root<Movimentacao> alias = criteria.from(Movimentacao.class);
		criteria.select(alias.<BigDecimal>get("valor"));
		Predicate conjunction = builder.conjunction();
		
		if (data != null){
			conjunction = builder.and(builder.equal(alias.<Calendar>get("data"), data));
			
		}
		criteria.where(conjunction);

		manager.joinTransaction();
		Query query = manager.createQuery(criteria);
		
		return query.getResultList();
	}

/*	public List<Movimentacao> criteriaResumidaComFiltro(Calendar data,
			TipoMovimentacao tipo, BigDecimal valor) {

		CriteriaBuilder builder = manager.getCriteriaBuilder();
		builder.createQuery(BigDecimal.class).from(Movimentacao.class).get("valor");
		Predicate conjunction = builder.conjunction();
		
		if (data != null){
			conjunction = builder.and(builder.equal(alias.<Calendar>get("data"), data));
			
		}
		criteria.where(conjunction);

		manager.joinTransaction();
		Query query = manager.createQuery(criteria);
		
		return query.getResultList();
	}
*/
	
	public void remove(Movimentacao movimentacao) {
		manager.joinTransaction();
		Movimentacao movimentacaoParaRemover = this.manager.find(
				Movimentacao.class, movimentacao.getId());
		this.manager.remove(movimentacaoParaRemover);
	}

}
