package br.com.caelum.financas.dao;

import java.math.BigDecimal;
import java.util.List;

import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import javax.persistence.Query;

import br.com.caelum.financas.exception.ValorInvalidoException;
import br.com.caelum.financas.modelo.Conta;
import br.com.caelum.financas.modelo.Movimentacao;
import br.com.caelum.financas.modelo.TipoMovimentacao;

@Stateless
public class MovimentacaoDao {

	@PersistenceContext
	EntityManager manager;

	public void adiciona(Movimentacao movimentacao) {
		this.manager.persist(movimentacao);

		if (movimentacao.getValor().compareTo(BigDecimal.ZERO) < 0) {
			throw new ValorInvalidoException("Movimentação negativa");
		}
	}

	public Movimentacao busca(Integer id) {
		return this.manager.find(Movimentacao.class, id);
	}

	public List<Movimentacao> lista() {
		return this.manager.createQuery("select m from Movimentacao m",
				Movimentacao.class).getResultList();
	}

	public List<Movimentacao> lista(Conta conta) {
		// Essa primeira atribuição possibilita um sql injection
		// String jpql = "select m from Movimentacao m where m.conta.id = " +
		// conta.getId();
		// Positional parameters - Essa segunda atribuição fica inviável quando
		// existem muitos parâmetros
		// String jpql = "select m from Movimentacao m where m.conta.id = ?1";
		// Named parameters
		String jpql = "select m from Movimentacao m where m.conta = :conta"
				+ " order by m.valor desc";
		Query query = manager.createQuery(jpql);
		// query.setParameter(1, conta.getId());
		query.setParameter("conta", conta);
		return query.getResultList();
	}
	
	public BigDecimal calculaTotalMovimentacao(Conta conta, TipoMovimentacao tipo){
		String jpql = "select sum(m.valor) from Movimentacao m "+
			"where m.conta = :conta and m.tipoMovimentacao = :tipo";
		Query query = manager.createQuery(jpql);
		query.setParameter("tipo", tipo);
		query.setParameter("conta", conta);
		return (BigDecimal) query.getSingleResult();
	}
	
	public List<Movimentacao> listaPorValorTipo(BigDecimal valor, TipoMovimentacao tipo) {
		String jpql = "select m from Movimentacao m where m.valor = :valor "
				+ "and m.tipoMovimentacao = :tipo "
				+ "order by m.valor desc";
		Query query = manager.createQuery(jpql);
		query.setParameter("valor", valor);
		query.setParameter("tipo", tipo);
		return query.getResultList();
	}

	public void remove(Movimentacao movimentacao) {
		Movimentacao movimentacaoParaRemover = this.manager.find(
				Movimentacao.class, movimentacao.getId());
		this.manager.remove(movimentacaoParaRemover);
	}

}
